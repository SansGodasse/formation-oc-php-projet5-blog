
DROP TABLE IF EXISTS bl_role_member;
DROP TABLE IF EXISTS bl_category_tag;
DROP TABLE IF EXISTS bl_post_tag;

DROP TABLE IF EXISTS bl_comment;
DROP TABLE IF EXISTS bl_post;
DROP TABLE IF EXISTS bl_member;
DROP TABLE IF EXISTS bl_role;
DROP TABLE IF EXISTS bl_category;
DROP TABLE IF EXISTS bl_tag;

CREATE TABLE bl_role(
	r_id INT UNSIGNED AUTO_INCREMENT,
	r_name VARCHAR(100),

	CONSTRAINT pk_r_id
		PRIMARY KEY (r_id)
)
ENGINE = InnoDB;

INSERT INTO bl_role
VALUES (null, 'member'),
	(null, 'author'),
	(null, 'editor'),
	(null, 'moderator'),
	(null, 'admin');

CREATE TABLE bl_member(
	m_id INT UNSIGNED AUTO_INCREMENT,
	m_email VARCHAR(100) NOT NULL UNIQUE,
	m_password VARCHAR(100) NOT NULL,
	m_name VARCHAR(100) NOT NULL UNIQUE,
	m_description VARCHAR(1000),

	CONSTRAINT pk_m_id
		PRIMARY KEY (m_id)
)
ENGINE = InnoDB;

CREATE TABLE bl_role_member(
	rm_member_id_fk INT UNSIGNED,
	rm_role_id_fk INT UNSIGNED,

	CONSTRAINT pk_rm_member_id_rm_role_id
		PRIMARY KEY (rm_member_id_fk, rm_role_id_fk),

	CONSTRAINT fk_rm_member_id_m_id
		FOREIGN KEY (rm_member_id_fk)
			REFERENCES bl_member(m_id)
			ON UPDATE CASCADE
			ON DELETE CASCADE,

	CONSTRAINT fk_rm_role_id_r_id
		FOREIGN KEY (rm_role_id_fk)
			REFERENCES bl_role(r_id)
			ON UPDATE CASCADE
			ON DELETE CASCADE
)
ENGINE = InnoDB;

CREATE TABLE bl_post(
	p_id INT UNSIGNED AUTO_INCREMENT,
	p_author_id_fk INT UNSIGNED,
	p_title VARCHAR(100) NOT NULL,
	p_excerpt VARCHAR(300) NOT NULL,
	p_content TEXT NOT NULL,
	p_creation_date DATETIME NOT NULL,
	p_last_modification_date DATETIME,
	p_last_editor_id_fk INT UNSIGNED,

	CONSTRAINT pk_p_id
		PRIMARY KEY (p_id),

	CONSTRAINT fk_p_author_id_m_id
		FOREIGN KEY (p_author_id_fk)
			REFERENCES bl_member(m_id)
			ON UPDATE CASCADE
			ON DELETE SET NULL,

	CONSTRAINT fk_p_last_editor_id_m_id
		FOREIGN KEY (p_last_editor_id_fk)
			REFERENCES bl_member(m_id)
			ON UPDATE CASCADE
			ON DELETE SET NULL
)
ENGINE = InnoDB;

CREATE TABLE bl_tag(
	tag_id INT UNSIGNED AUTO_INCREMENT,
	tag_name VARCHAR(100),

	CONSTRAINT pk_tag_id
		PRIMARY KEY (tag_id)
)
ENGINE = InnoDB;

CREATE TABLE bl_post_tag(
	pt_post_id_fk INT UNSIGNED,
	pt_tag_id_fk INT UNSIGNED,

	CONSTRAINT pk_pt_post_id_pt_tag_id
		PRIMARY KEY (pt_post_id_fk, pt_tag_id_fk),

	CONSTRAINT fk_pt_post_id_p_id
		FOREIGN KEY (pt_post_id_fk)
			REFERENCES bl_post(p_id)
			ON UPDATE CASCADE
			ON DELETE CASCADE,

	CONSTRAINT fk_pt_tag_tag_id
		FOREIGN KEY (pt_tag_id_fk)
			REFERENCES bl_tag(tag_id)
			ON UPDATE CASCADE
			ON DELETE CASCADE
)
ENGINE = InnoDB;

CREATE TABLE bl_category(
	cat_id INT UNSIGNED AUTO_INCREMENT,
	cat_name VARCHAR(100),

	CONSTRAINT pk_cat_id
		PRIMARY KEY (cat_id)
)
ENGINE = InnoDB;

CREATE TABLE bl_category_tag(
	ct_category_id_fk INT UNSIGNED,
	ct_tag_id_fk INT UNSIGNED,

	CONSTRAINT pk_ct_category_id_ct_tag_id
		PRIMARY KEY (ct_category_id_fk, ct_tag_id_fk),

	CONSTRAINT fk_ct_category_cat_id
		FOREIGN KEY (ct_category_id_fk)
			REFERENCES bl_category(cat_id)
			ON UPDATE CASCADE
			ON DELETE CASCADE,

	CONSTRAINT fk_ct_tag_id_tag_id
		FOREIGN KEY (ct_tag_id_fk)
			REFERENCES bl_tag(tag_id)
			ON UPDATE CASCADE
			ON DELETE CASCADE
)
ENGINE = InnoDB;

CREATE TABLE bl_comment(
	com_id INT UNSIGNED AUTO_INCREMENT,
	com_parent_id_fk INT UNSIGNED,
	com_post_id_fk INT UNSIGNED NOT NULL,
	com_author_id_fk INT UNSIGNED NOT NULL,
	com_last_editor_id_fk INT UNSIGNED,
	com_creation_date DATETIME NOT NULL,
	com_last_modification_date DATETIME,
	com_content TEXT NOT NULL,
	com_approved TINYINT(1) NOT NULL DEFAULT 0,

	CONSTRAINT pk_com_id
		PRIMARY KEY (com_id),

	CONSTRAINT fk_com_parent_id_com_id
		FOREIGN KEY (com_parent_id_fk)
			REFERENCES bl_comment(com_id)
			ON UPDATE CASCADE
			ON DELETE CASCADE,

	CONSTRAINT fk_com_author_id_m_id
		FOREIGN KEY (com_author_id_fk)
			REFERENCES bl_member(m_id)
			ON UPDATE CASCADE
			ON DELETE CASCADE,

	CONSTRAINT fk_com_post_id_p_id
		FOREIGN KEY (com_post_id_fk)
			REFERENCES bl_post(p_id)
			ON UPDATE CASCADE
			ON DELETE CASCADE,

	CONSTRAINT fk_com_last_editor_id_m_id
		FOREIGN KEY (com_last_editor_id_fk)
			REFERENCES bl_member(m_id)
			ON UPDATE CASCADE
			ON DELETE CASCADE
)
ENGINE = InnoDB;


-- Données

INSERT INTO `bl_category` (`cat_id`, `cat_name`) VALUES
(21, 'A propos'),
(22, 'Blog'),
(23, 'Réalisations');

INSERT INTO `bl_category_tag` (`ct_category_id_fk`, `ct_tag_id_fk`) VALUES
(21, 71),
(22, 73),
(23, 74),
(22, 92);	

INSERT INTO `bl_member` (`m_id`, `m_email`, `m_password`, `m_name`, `m_description`) VALUES
(87, 'admin@admin.adm', '$2y$10$MUyFQplVCEYj44iA7jnUu.iZoMHYvKUycm6NR2WDBCMNalKJEc.Wu', 'admin', ''),
(88, 'sarah.croche@gmail.com', '$2y$10$N27TlsyNeOxbtFmYrzKF0OJJIsU1nBN1v4VDSjl5LcTAhQwHW/0qS', 'sarah croche', ''),
(90, 'nicolas.renvoise.dev@gmail.com', '$2y$10$9wilQCpRMmvSC2NY3BnNR.f7KLTyMeWGcwD9HhZiyTt9WnXGl.EYm', 'Nicolas Renvoisé', ''),
(91, 'jim.nastique@gmail.com', '$2y$10$KR6s/Cn.hoA4uvc9XtVlCuOiomlAsgarPzogv69nBysaMPM.gNwee', 'jim nastique', ''),
(92, 'larry.viere@gmail.com', '$2y$10$g8IjxXoDKXf6bhXqGPypOOG3ICZ.3qlr7n/d.cbHeXh2bEJUH.VTy', 'Larry Vière', ''),
(93, 'paul.emploi@gmail.com', '$2y$10$qfkWgJGDaLSKEiGI4seGMuAR0R4Xdm8RTKpu6hdofjH1R5W07Bzia', 'Paul Emploi', NULL),
(94, 'lenny.bards@gmail.com', '$2y$10$UyLhlo3DGXZniMGcbAEXqec183r3vxyPZOKqVxHrYoUAtj2X89xU2', 'Lenny Bards', ''),
(95, 'jean.tenbien@yahoo.fr', '$2y$10$L0qq2VnymYIphczV0c1nveww8rTKPEAkmn3tX/uHtgFrptfdXWMd2', 'Jean Tenbien', NULL);

INSERT INTO `bl_post` (`p_id`, `p_author_id_fk`, `p_title`, `p_excerpt`, `p_content`, `p_creation_date`, `p_last_modification_date`, `p_last_editor_id_fk`) VALUES
(12, 90, 'En bref', 'Je suis Nicolas Renvoisé, 31 ans à l\'heure où j\'écris cet article, et je me suis reconverti en tant que développeur backend avec l\'aide d\'OpenClassrooms. Pourquoi ? Parce que j\'ai découvert que le code, j\'adore ça !!!', '<h2>Comment j\'en suis arrivé là ?</h2><p>Au départ, j\'ai fais 3 ans d\'études dans le domaine de l\'eau et de l\'environnement après mon bac scientifique. A l\'issue, je me suis engagé dans l\'armée en tant que contrôleur aérien. Finalement, l\'armée ce n\'était pas aussi bien que ce que j\'espérais et j\'ai arrêté à la fin de mon contrat initial. J\'ai alors intégré un bureau d\'études spécialisé dans l\'eau et l\'environnement où je me suis découvert une passion pour la programmation lorsque j\'ai eu à faire des fichiers excel en VBA. Depuis ce jour, je n\'arrête pas de coder !</p><p>Un ami programmeur m\'a conseillé de suivre les cours du site du zéro sur le langage C pour débuter sur de bonnes bases. C\'est alors que j\'ai découvert que le site du zéro était devenu OpenClassrooms et je m\'y suis inscrit.</p><p>Après le cours de Mathieu Nebra sur le C (un super cours, je le recommande !), j\'ai enchainé sur les cours liés au web, domaine qui m\'intriguait beaucoup. Entre temps, j\'en avais marre de mon travail au bureau d\'études (la boîte était super, mais je n\'aimais pas rédiger des rapports de 600 pages refoulés pour un oui ou pour un non par l\'administration...) et finalement j\'ai décidé de partir pour me reconvertir dans le développement web en suivant la formation de développeur d\'application PHP/Symfony d\'OpenClassrooms.</p><h2>Pourquoi cette formation et pas une autre ?</h2><p>Une école Simplon s\'était ouverte à 40 minutes de chez moi depuis 2 ans, mais rien n\'indiquait que la formation gratuite qu\'elle proposait aller être reconduite. Du coup j\'ai opté pour OpenClassrooms en demandant un financement de la part de Pôle emploi, ce qui fut accepté ! Ouf ! Du coup non seulement j\'ai l\'avantage de suivre une formation reconnue par l\'Etat, mais en plus je n\'ai pas à me déplacer !</p><h2>Finalement, comment ça se passe ?</h2><p>Bien. Vraiment très bien même ! Je m\'éclate tous les jours à programmer, dès que je sèche je peux en parler soit avec mon mentor, soit avec les autres étudiants d\'OpenClassrooms. Je n\'ai jamais aussi bien vécu une formation.</p>', '2019-02-14 22:38:10', '2019-02-15 21:01:44', 90),
(13, 90, 'Pourquoi ce site ?', 'Ce site présente mes projets et contient des infos sur divers thèmes que je trouve intéressants, notamment des astuces que je découvre sur le développement.', '<p>En plus de mes réalisations, vous trouverez des informations que je glane à droite à gauche sur des thèmes qui me tiennent à cœur, comme la santé et le sport.</p>', '2019-02-14 22:42:08', '2019-02-15 21:02:23', 90),
(16, 90, 'Cheatlist CSS', 'Des infos en vrac que j\'écris au fur et à mesure que j\'utilise le langage CSS.', '<article>\r\n                <h2>Les propriétés</h2>\r\n\r\n                <table>\r\n                    <tr>\r\n                        <th>Propriété</th>\r\n                        <th>Définition</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><code>padding</code></td>\r\n                        <td>\r\n                            Gère l\'espacement entre le texte et les limites du conteneur.<br />\r\n                            <code>padding: haut droite bas gauche;</code> Pour renseigner en une fois les 4 directions.<br />\r\n                            <code>padding: (haut bas) (gauche droite);</code> Si le haut = le bas et la gauche = la droite on peut ne mettre que 2 valeurs.\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><code>margin</code></td>\r\n                        <td>\r\n                            Gère l\'espacement entre les blocs.<br />\r\n                            <code>margin: haut droite bas gauche;</code> Pour renseigner en une fois les 4 directions.<br />\r\n                            <code>margin: (haut bas) (gauche droite);</code> Si le haut = le bas et la gauche = la droite on peut ne mettre que 2 valeurs.\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><code>::before et ::after</code></td>\r\n                        <td>\r\n                            Permet d\'afficher quelquechose avant (:before) ou après (:after) le bloc.<br />\r\n                            Exemple : <em class=\"css-before-after\">World</em><br />\r\n                            Ici on insère <em>\'Hello \'</em> avec <code>nom-classe:before { content: \'Hello \'; }</code> et <em>\' !\'</em> avec <code>nom-classe:after { content: \' !\'; }</code>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><code>overflow</code></td>\r\n                        <td>\r\n                            Choisi le comportement à adopter quand le texte dépasse d\'un bloc.<br />\r\n                            <ul>\r\n                                <li><code>overflow: visible</code> Le texte reste visible à l\'extérieur du bloc <em>(par défaut)</em></li>\r\n                                <li><code>overflow: hidden</code> Masque le texte qui dépasse</li>\r\n                                <li><code>overflow: scroll</code> Ajoute des barres de défilement au bloc</li>\r\n                                <li><code>overflow: auto</code> Ajoute des barres de dévilement au bloc uniquement si besoin <em>(valeur conseillée)</em></li>\r\n                            </ul>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><code>div:nth-of-type(even)</code></td>\r\n                        <td>\r\n                            <code>div:nth-of-type(even)</code> Applique la mise en forme aux div pairs<br />\r\n                            <code>div:nth-of-type(odd)</code> Applique la mise en forme aux div impaires<br />\r\n                            <code>div:nth-of-type(an+b)</code> Forme générale où <em>a</em> et <em>b</em> sont des nombres entiers<br />\r\n                            Utile pour mettre en valeur les lignes d\'un tableau. Exemple sur un tableau WordPress :\r\n<pre>\r\n.wp-block-table tbody tr:nth-of-type(even) {\r\n    background-color: rgba(0, 0, 0, 0.05);\r\n}\r\n</pre>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><code>white-space: nowrap;</code></td>\r\n                        <td>\r\n                            Empêche le retour à la ligne possible à chaque espace\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><code>opacity: 0.42;</code></td>\r\n                        <td>\r\n                            Permet de régler la transparence d\'un élément. De 0 = invisible à 1 = visible complètement.\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </article>\r\n\r\n            <article>\r\n                <h2>Les sélecteurs</h2>\r\n\r\n                <dl>\r\n                    <dt>\r\n                        Les liens Link - Visited - Hover - Active (LoVe HAte)\r\n                        <ul>\r\n                            <li>\r\n                                <code>a:visited</code>\r\n                            </li>\r\n                        </ul>\r\n                    </dt>\r\n                    <dd>\r\n                        Pour les liens déjà visités.\r\n                    </dd>\r\n                </dl>\r\n            </article>', '2019-02-14 23:15:39', '2019-02-16 07:37:09', 90),
(17, 90, 'Cheatlist Git et GitHub', 'Des infos en vrac que j\'écris au fur et à mesure que j\'utilise Git et GitHub.', '    			<h2>Git</h2>\r\n\r\n    		<h3>Liste des commandes utiles de la console</h3>\r\n\r\n            <!-- Commandes de la console -->\r\n    		<table class=\"manualTable\" id=\"handyCommandsTable\">\r\n    			<tr>\r\n    				<th>Commande</th>\r\n    				<th>Description</th>\r\n                    <th class=\"tag\">Tags</th>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>pwd</code></td>\r\n    				<td>Donne le répertoire courant</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>ls</code></td>\r\n    				<td>Donne la liste des fichiers et répertoires dans le dossier courant</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>ls -l</code></td>\r\n    				<td>Affiche une liste des fichiers et répertoires du dossier courant</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>ls -a</code></td>\r\n    				<td>Donne des infos supplémentaires</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>cd nomRépertoire</code></td>\r\n    				<td>Permet de se placer dans un répertoire</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>cd ..</code></td>\r\n    				<td>Permet d\'aller au répertoire parent</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>cd ~</code></td>\r\n    				<td>Revient au répertoire principal</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>touch nomFichier</code></td>\r\n    				<td>Permet de créer un fichier</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>mkdir nomRépertoire</code></td>\r\n    				<td>Permet de créer un dossier</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>car nomFichier</code></td>\r\n    				<td>Affiche le contenu d\'un fichier</td>\r\n    			</tr>\r\n                <tr>\r\n                    <td><code>clear</code></td>\r\n                    <td>Efface la console</td>\r\n                </tr>\r\n    			<tr>\r\n    				<td><code>ctl + shift + inser</code></td>\r\n    				<td>Permet de coller du texte dans la console</td>\r\n    			</tr>\r\n    		</table>\r\n\r\n    		<h3>Utilisation de git</h3>\r\n\r\n            <!-- Utilisation de git -->\r\n    		<table class=\"manualTable\" id=\"gitUseTable\">\r\n    			<tr>\r\n    				<th>Commande</th>\r\n    				<th>Description</th>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>git config --global user.name \"nomDeLUtilisateur\"</code></td>\r\n    				<td>Configure le nom d\'utilisateur de git</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>git config --global user.email \"emailDeLUtilisateur\"</code></td>\r\n    				<td>Configure l\'email de l\'utilisateur de git</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>git init</code></td>\r\n    				<td>Active le répertoire courant en repository git (ajoute un dossier caché .git au répertoire)</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>git status</code></td>\r\n    				<td>Donne le statut du repository (fichiers indexés ou non pouvant faire l\'objet d\'un commit)</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>git log</code></td>\r\n    				<td>Donne les différents commit du repository</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td>Touche \"q\" du clavier</td>\r\n    				<td>Permet de sortir du log</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>git add nomDuFichierAIndexer.extension</code></td>\r\n    				<td>Ajoute un fichier à l\'index de git pour pouvoir en faire un commit</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>git add .</code></td>\r\n    				<td>Indexe tous les fichiers du repository en vue d\'un commit</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>git commit -m \"Entrez ici la description du commit\"</code></td>\r\n    				<td>Permet de créer un commit</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>git commit -a -m \"Entrez ici la description du commit\"</code></td>\r\n    				<td>Le -a permet de créer un commit avec les fichiers qui ont déjà été indexés une fois et sans avoir à les réindexer avec add</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>git checkout SHADuCommit</code></td>\r\n    				<td>Revenir à un commit précédent</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>git checkout master</code></td>\r\n    				<td>Revenir au dernier commit</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>git revert SHADuCommit</code></td>\r\n    				<td>Créé un nouveau commit qui fait exactement l\'inverse du précédent (pour annuler le commit précédent)</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>git commit --amend -m \"Votre nouveau message pour le dernier commit\"</code></td>\r\n    				<td>Modifie le message du dernier commit</td>\r\n    			</tr>\r\n    			<tr>\r\n    				<td><code>git reset --hard</code></td>\r\n    				<td>Annule les changements qui n\'ont pas encore été commités</td>\r\n    			</tr>\r\n                <tr>\r\n                    <td><code>git branch</code></td>\r\n                    <td>Affiche les différentes branches du repository</td>\r\n                </tr>\r\n                <tr>\r\n                    <td><code>git branch nomDeLaNouvelleBranche</code></td>\r\n                    <td>Créé une nouvelle branche</td>\r\n                </tr>\r\n                <tr>\r\n                    <td><code>git branch -d nomDeLaBrancheASupprimer</code></td>\r\n                    <td>Supprime une branche</td>\r\n                </tr>\r\n                <tr>\r\n                    <td><code>git checkout nomDeLaBranche</code></td>\r\n                    <td>Se placer sur une branche</td>\r\n                </tr>\r\n                <tr>\r\n                    <td><code>git checkout -b nomDeLaNouvelleBranche</code></td>\r\n                    <td>Créé une nouvelle branche et nous place dessus</td>\r\n                </tr>\r\n                <tr>\r\n                    <td><code>git merge nomDeLaBrancheAFusionner</code></td>\r\n                    <td>\r\n                        Permet de fusionner 2 branches<br />\r\n                        Par exemple pour ajouter dans une branche A les mises à jour que vous avez faites dans une autre branche B, on se place dans la branche A avant d\'exécuter la commande <code>git merge brancheB</code>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td><code>git blame nomDuFichier.sonExtension</code></td>\r\n                    <td>\r\n                        Liste toutes les modifications qui ont été faites sur le fichier ligne par ligne. À chaque modification est associé le début du sha du commit correspondant.\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td><code>git show debutCommitSHA</code></td>\r\n                    <td>\r\n                        Affiche les détails du commit recherché en saisissant le début de son sha.\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Fichier <em>.gitignore</em></td>\r\n                    <td>\r\n                        Fichier à créer à la racine du projet. Il doit contenir les noms des fichiers à ignorer (par exemple des fichiers contenant des mots de passe).<br />\r\n                        Exemple de contenu du fichier <em>.gitignore</em> :\r\n                        <pre>\r\nkeys/monFichierDeClesAPI.zog\r\nmonFichierDeConfiguration.conf\r\nnom_du_dossier_a_ignorer/\r\n                        </pre>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td><code>git stash</code> et <code>git stash pop</code> ou <code>git stash apply</code></td>\r\n                    <td>\r\n                        <p>\r\n                            <code>git stash</code> met de côté les modifications en cours qui n\'ont pas fait l\'objet d\'un commit pour pouvoir faire d\'autres modifications, par exemple lorsque quelqu\'un nous demande de régler un bug qui n\'a rien à voir avec ce sur quoi on travaille actuellement. On stash notre travail, on règle le bug, on commit les modifications apportées pour régler le bug et on revient sur notre travail avec <code>git stash pop</code> ou <code>git stash apply</code>.\r\n                        </p>\r\n                        <p>\r\n                            La différence entre <code>pop</code> et <code>apply</code> est que nos modifications sont effacées du stash lors d\'un <code>pop</code>.\r\n                        </p>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <code>git commit --amend</code>\r\n                    </td>\r\n                    <td>\r\n                        <p>\r\n                            Permet d\'ajouter des modifications au dernier commit et de modifier le message associé.\r\n                        </p>\r\n                        <p>\r\n                            Penser à faire un <code>git push origin master --force</code> à l\'issue pour mettre à jour le commit de GitHUB.\r\n                        </p>\r\n                    </td>\r\n                    <td class=\"tag\">\r\n                        Modifier le message d\'un commit\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <code>git rebase -i HEAD~nombreDeCommitsRealisesEnPartantDuPlusRecent</code> ou <code>git rebase -i --root</code>\r\n                    </td>\r\n                    <td>\r\n                        <p>\r\n                            Ouvre l\'éditeur de texte et affiche de haut en bas le commit sélectionné et tous les commits réalisés après ou tous les commits depuis le début si on utilise <code>git rebase -i --root</code>.\r\n                        </p>\r\n                        <p>\r\n                            Chaque commit est précédé de <code>pick</code>. On peut alors modifier le message d\'un commit en remplaçant <code>pick</code> par <code>edit</code>. Une fois le fichier enregistré et l\'éditeur quitté, on peut exécuter la commande <code>git commit --amend</code> pour procédé à la modification du message du commit. Dernière étape, exécuter <code>git rebase --continue</code>.\r\n                        </p>\r\n                        <p>\r\n                            Penser à faire un <code>git push origin master --force</code> à l\'issue pour mettre à jour le commit de GitHUB.\r\n                        </p>\r\n                    </td>\r\n                    <td class=\"tag\">\r\n                        Modifier le message d\'un commit\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <code>git branch nomNouvelleBranche</code><br> On créé une nouvelle branche pour sauvegarder les derniers commits réalisés\r\n                        <code>git reset --hard HEAD~3</code> pour revenir 3 commits en arrière ou <code>git reset --hard shaDuCommit</code> pour revenir à un commit particulier<br>\r\n                        <code>git checkout nomNouvelleBranche</code> On revient sur la nouvelle branche\r\n                    </td>\r\n                    <td>\r\n                        Déplacer les derniers commits de la branche master dans une nouvelle branche\r\n                    </td>\r\n                </tr>\r\n    		</table>\r\n\r\n            <h3>Edition du fichier de configuration</h3>\r\n\r\n            <!-- Configuration de git -->\r\n            <table class=\"manualTable\" id=\"gitConfig\">\r\n                <tr>\r\n                    <th>Action</th>\r\n                    <th>Comment faire</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>Ouvrir le fichier de configuration de Git</td>\r\n                    <td>\r\n                        <ul>\r\n                            <li>Se placer dans le répertoire personnel <code>C:\\Users\\nomDeLUtilisateur</code></li>\r\n                            <li>Ouvrir le fichier <code>.gitconfig</code></li>\r\n                        </ul>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Créer des alias pour aller plus vite</td>\r\n                    <td>\r\n                        <ul>\r\n                            <li>Ouvrir le fichier de configuration de Git</li>\r\n                            <li>\r\n                                Ajouter à la fin les alias<br />\r\n                                <pre>\r\n[alias]\r\n    ci = commit\r\n    co = checkout\r\n    st = status\r\n    br = branch\r\n                                </pre>\r\n                            </li>\r\n                            <li>Maintenant on peut taper juste <code>git st</code> pour afficher le status</li>\r\n                        </ul>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n\r\n<h2>GitHub</h2>\r\n\r\n			<h3>Actions possibles</h3>\r\n\r\n			<table>\r\n				<tr>\r\n					<th>Action</th>\r\n					<th>Comment faire</th>\r\n				</tr>\r\n				<tr>\r\n					<td>Récupérer un repository</td>\r\n					<td>\r\n						<ul>\r\n							<li>Taper le nom du repository désiré dans la barre de recherche</li>\r\n							<li>Cliquer sur Clone or download</li>\r\n							<li>Copier le lien</li>\r\n							<li>Exécuter <code>git clone https://lienCopiéSurGitHub</code> dans le dossier devant recevoir le repository</li>\r\n						</ul>\r\n					</td>\r\n				</tr>\r\n				<tr>\r\n					<td>Créer un repository</td>\r\n					<td>\r\n						<ul>\r\n    						<li>Cliquer sur le + situé à gauche de l\'avatar puis sur new repository</li>\r\n    						<li>Renseigner le nom, la description et ajouter une licence</li>\r\n    						<li>Au passage on peut initialiser le repository avec un fichier README.md pour pouvoir immédiatement le cloner sur notre ordi. Inutile si on a déjà un repository sur l\'ordi.</li>\r\n    					</ul>\r\n					</td>\r\n				</tr>\r\n                <tr>\r\n                    <td>Connecter un repository local avec un repository GitHub</td>\r\n                    <td>\r\n                        <ul>\r\n                            <li>Ouvrir une console dans le repository local</li>\r\n                            <li>Exécuter <code>git remote add origin https://github.com/nomUtilisateur/nomProjet</code></li>\r\n                        </ul>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Changer l\'url du repository GitHUB</td>\r\n                    <td>\r\n                        <code>git remote set-url https://github.com/userName/repositoryName.git</code>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Envoyer le code du repository local vers GitHub</td>\r\n                    <td>\r\n                        <ul>\r\n                            <li>Ouvrir une console dans le repository local</li>\r\n                            <li>Faire un commit des modifications apportées au code</li>\r\n                            <li>Utiliser la commande <code>git push origin master</code> ou, si on travaille sur une branche, <code>git push origin nomDeLaBranche</code></li>\r\n                        </ul>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Récupérer des modifs depuis GitHub vers le repository local</td>\r\n                    <td>\r\n                        <ul>\r\n                            <li>Ouvrir une console dans le repository local</li>\r\n                            <li>Exécuter <code>git pull origin master</code></li>\r\n                        </ul>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Faire une pull request pour contribuer à un projet open source</td>\r\n                    <td>\r\n                        <ol>\r\n                            <li>\r\n                                Lire les consignes de contribution dans le <em>README.md</em> du projet\r\n                            </li>\r\n                            <li>\r\n                                Sur le repository auquel on veut contribuer, faire un <em>Fork</em> en cliquant sur le bouton <em>Fork</em> du repository\r\n                            </li>\r\n                            <li>\r\n                                Cloner le repository sur notre ordi via un <code>git clone</code>\r\n                            </li>\r\n                            <li>\r\n                                Créer une nouvelle branche dans le repository cloné avec <code>git checkout -b nomDeLaNouvelleBranche</code>\r\n                            </li>\r\n                            <li>\r\n                                Faire les modifications et faire un commit\r\n                            </li>\r\n                            <li>\r\n                                Envoyer les modifications sur GitHUB avec un <code>git push origin nomDeLaNouvelleBranche</code>\r\n                            </li>\r\n                            <li>\r\n                                Aller sur le repository GitHUB cloné et cliquer sur <em>Compare & pull-request</em>\r\n                            </li>\r\n                            <li>\r\n                                Rédiger un joli message expliquant le pourquoi du comment et c\'est parti !\r\n                            </li>\r\n                        </ol>\r\n                    </td>\r\n                </tr>\r\n			</table>\r\n\r\n			<h3>Astuces</h3>\r\n\r\n			<ul id=\"tipsList\">\r\n				<li>touche T : Faire une recherche</li>\r\n			</ul>', '2019-02-14 23:19:16', '2019-02-16 07:37:17', 90),
(18, 90, 'Cheatlist HTML', 'Des infos en vrac que j\'écris au fur et à mesure que j\'utilise le langage HTML.', '<article>\r\n                <h2>Balises sympa</h2>\r\n                \r\n                <dl>\r\n                    <dt>\r\n                        <code>&lt;pre&gt;&lt;/pre&gt;</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Permet d\'afficher du texte avec les tabulations et les retours à la ligne. Pratique pour écrire du code.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>&lt;p&gt;&lt;/p&gt;</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Un paragraphe.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>&lt;h1&gt;&lt;/h1&gt;</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Un titre. On peut aller jusqu\'à 6 : h2, h3, h4...\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>&lt;img /&gt;</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Une image.<br />\r\n                        Attributs :\r\n                        <ul>\r\n                            <li><code>src=\"../images/image.jpg\"</code> Chemin de l\'image. <code>../</code> permet d\'aller dans le dossier parent.</li>\r\n                            <li><code>alt=\"Texte à afficher si l\'image ne se charge pas\"</code></li>\r\n                            <li><code>title=\"infobulle\"</code></li>\r\n                        </ul>\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>&lt;kbd&gt;&lt;/kbd&gt;</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Représente une touche du clavier (exemple : <kbd>z</kbd>)\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>&lt;hr&gt;</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Représente un changement thématique entre des éléments de paragraphe. <em>C\'est cette barre sur laquelle repose ces mots.</em> <hr> (par exemple, un changement de décor dans un récit, un changement de sujet au sein d\'un section).\r\n                    </dd>\r\n                </dl>\r\n            </article>\r\n\r\n            <article>\r\n                <h2>Les formulaires</h2>\r\n\r\n                <h3>Attributs communs</h3>\r\n\r\n                <dl>\r\n                    <dt>\r\n                        <code>required</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Oblige le visiteur à remplir le champ.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>checked</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Coche la case.\r\n                    </dd>\r\n                </dl>\r\n            </article>', '2019-02-14 23:20:56', '2019-02-16 07:37:29', 90);
INSERT INTO `bl_post` (`p_id`, `p_author_id_fk`, `p_title`, `p_excerpt`, `p_content`, `p_creation_date`, `p_last_modification_date`, `p_last_editor_id_fk`) VALUES
(23, 90, 'Cheatlist PHP', 'Des infos en vrac que j\'écris au fur et à mesure que j\'utilise le langage PHP.', '                <h2>Serveur</h2>\r\n\r\n                <dl>\r\n                    <dt>\r\n                        <code>php -S localhost:8000</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Lance un serveur local qu\'on peut accéder sur le navigateur en tapant <code>http://localhost:8080/</code> dans la barre d\'adresse. Commande a exécuter dans le dossier contenant le fichier <code>index.php</code> ou exécuter <code>php -S localhost:8000 -t public</code> depuis le dossier du site dans le cas où <code>index.php</code> est dans le répertoire <code>public</code>.\r\n                    </dd>\r\n                </dl>\r\n\r\n                <h2>Les variables</h2>\r\n\r\n                <h3>Variables statiques</h3>\r\n\r\n                <div>\r\n                    <p>\r\n                        Variables utilisées dans des fonctions dont la valeur sera gardée au prochain appel de la fonction. Utile pour faire de la récursivité.\r\n                    </p>\r\n                    <pre>\r\nfunction testStaticVariables()\r\n{\r\n    static $a = 0;\r\n    echo $a;\r\n    $a++;\r\n}\r\n\r\n$i = 0;\r\nwhile ($i < 5) {\r\n	testStaticVariables();\r\n	$i++;\r\n} // Affiche 01234\r\n\r\nfunction testStaticVariablesWithRecursion()\r\n{\r\n    static $count = 0;\r\n\r\n    $count++;\r\n    echo $count;\r\n    if ($count < 10) {\r\n        testStaticVariablesWithRecursion();\r\n    }\r\n    $count--;\r\n}\r\n\r\ntestStaticVariablesWithRecursion(); // Affiche 0123456789\r\n                    </pre>\r\n                </div>\r\n\r\n                <h2>Les tableaux</h2>\r\n\r\n                <dl>\r\n                    <dt>\r\n                        Accéder au dernier élément d\'un tableau avec <code>$myArray[-1]</code>\r\n                    </dt>\r\n\r\n                    <dt>\r\n                        <code>$myArray[] = $myVar</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Ajoute un élément à la fin du tableau\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>int array_push ( array &$array [, mixed $... ] )</code>\r\n                    </dt>\r\n                    <dd>\r\n                        array_push() considère array comme une pile, et empile les variables var, ... à la fin de array. La longueur du tableau array augmente d\'autant.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>array array_merge ( array $array1 [, array $... ] )</code>\r\n                    </dt>\r\n                    <dd>\r\n                        array_merge() rassemble les éléments d\'un ou de plusieurs tableaux en ajoutant les valeurs de l\'un à la fin de l\'autre. Le résultat est un tableau.\r\n\r\n                        Si les tableaux d\'entrées ont des clés en commun, alors, la valeur finale pour cette clé écrasera la précédente. Cependant, si les tableaux contiennent des clés numériques, la valeur finale n\'écrasera pas la valeur originale, mais sera ajoutée.\r\n\r\n                        Les clés numériques des tableaux d\'entrées seront renumérotées en clés incrémentées partant de zéro dans le tableau fusionné.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        Boucler sur un tableau avec <code>foreach ($posts as $post)</code> ou <code>foreach ($posts as $key => $value)</code> ou encore <code>foreach ($posts as [\'aParticularKey\' => $value])</code> pour récupérer uniquement les valeurs d\'une clé particulière\r\n                    </dt>\r\n                    <dd>\r\n                        Note : on peut aussi utiliser une boucle <code>for ($i = 0, $size = count($myArray); $i < $count; $i++) { // Do things with $myArray[$i] }</code>\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>array_reduce ( array $array , callable $callback [, mixed $initial = NULL ] ) : mixed</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Applique le callback à tous les éléments du tableau et retourne le résultat. Voici la forme du callback : <code>callback ( mixed $carry , mixed $item ) : mixed</code>. Si l\'argument optionnel <code>$initial</code> est disponible, il sera utilisé pour initialiser le processus, ou bien comme valeur finale si le tableau est vide.\r\n                    </dd>\r\n                </dl>\r\n\r\n                <h2>Les fonctions anonymes ou <em>closures</em></h2>\r\n\r\n                <div>\r\n                    <p>Exemple</p>\r\n                    <pre>\r\n$myVar = \'Hello world!\';\r\n\r\n$myClosure = function () use ($myVar) {\r\n    echo $myVar;\r\n};\r\n\r\n$myClosure();\r\n                    </pre>\r\n\r\n                    <p>Utilisation d\'une closure comme paramètre d\'une fonction (type <em>callable</em>)</p>\r\n                    <pre>\r\n/*\r\n * Exécute une fonction de callback\r\n */\r\nfunction doACallback(callable $callback) // callable : pour avoir quelque chose d\'appelable, comme une closure ou un objet ayant une méthode <code>__invoke()</code>.\r\n{\r\n    $callback();\r\n}\r\n\r\ndoACallback(function () {\r\n    echo \'zog\';\r\n});\r\n\r\n$myVar = \'zogzog\';\r\n\r\ndoACallback(function() use ($myVar) {\r\n    echo $myVar;\r\n});\r\n                    </pre>\r\n\r\n                    <p>Cas de closures dans une classe</p>\r\n                    <pre>\r\n// Cas où l\'on utilise $this dans une closure d\'une méthode : $this sera automatiquement lié à l\'objet\r\nclass Test\r\n{\r\n    public function testing()\r\n    {\r\n        return function() {\r\n            var_dump($this);\r\n        };\r\n    }\r\n}\r\n\r\n$object = new Test;\r\n$function = $object->testing();\r\n$function(); // Output : object(Test)#1 (0) {}\r\n\r\n// Pour éviter ce comportement, on peut déclarer une closure statique\r\nclass Foo\r\n{\r\n    function __construct()\r\n    {\r\n        $func = static function() {\r\n            var_dump($this);\r\n        };\r\n        $func();\r\n    }\r\n};\r\nnew Foo(); // Affiche Notice: Undefined variable: this in %s on line %d NULL\r\n                    </pre>\r\n                </div>\r\n\r\n                <h2>Les exceptions</h2>\r\n\r\n                <p>\r\n                    Liste des exceptions pré-définies <a href=\"http://fr2.php.net/manual/fr/spl.exceptions.php\">ici.</a>\r\n                </p>\r\n\r\n                <h2>Fonctions pratiques</h2>\r\n\r\n                <h3>Variables</h3>\r\n\r\n                <dl>\r\n                    <dt>\r\n                        <code>bool isset ( mixed $var [, mixed $... ] )</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Détermine si une variable est définie et est différente de NULL. <br>\r\n                        Si plusieurs paramètres sont fournis, alors la fonction isset() retournera TRUE seulement si tous les paramètres sont définis. L\'évaluation s\'effectue de gauche vers la droite et s\'arrête dès qu\'une variable non définie est rencontrée. \r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>void unset ( mixed $var [, mixed $... ] )</code>\r\n                    </dt>\r\n                    <dd>\r\n                        unset() détruit la ou les variables dont le nom a été passé en argument var. Peut servir à supprimer un élément d\'un tableau.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>mixed filter_var ( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]] )</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Permet de filtrer des données. Retourne les données filtrées ou false si le filtre a échoué. Utile pour vérifier les adresses email par exemple avec <code>if (filter_var($email, FILTER_VALIDATE_EMAIL) {}</code>\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>extract ( array &$array [, int $flags = EXTR_OVERWRITE [, string $prefix = NULL ]] ) : int</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Créé des variables à partir des éléments d\'un tableau. Retourne le nombre de variables importées avec succès dans la table des symboles (symbole = variable).\r\n                    </dd>\r\n                </dl>\r\n\r\n                <h3>Fonctions</h3>\r\n\r\n                <dl>\r\n                    <dt>\r\n                        <code>array func_get_args ( void )</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Récupère les arguments d\'une fonction sous la forme d\'un tableau.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>mixed func_get_arg ( int $arg_num )</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Récupère un élément de la liste des arguments d\'une fonction utilisateur. Les arguments sont comptés à partir de 0.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>int func_num_args ( void )</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Récupère le nombre d\'arguments passés à la fonction.\r\n                    </dd>\r\n                </dl>\r\n\r\n                <h3>Fichiers</h3>\r\n\r\n                <dl>\r\n                    <dt>\r\n                        <code>string file_get_contents ( string $filename [, bool $use_include_path = FALSE [, resource $context [, int $offset = 0 [, int $maxlen ]]]] )</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Lit tout un fichier dans une chaîne.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code> unlink ( string $filename [, resource $context ] ) : bool</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Efface un fichier.\r\n                    </dd>\r\n                </dl>\r\n\r\n                <h3>POO</h3>\r\n\r\n                <dl>\r\n                    <dt>\r\n                        <code>get_called_class()</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Retourne le nom de la classe depuis laquelle une méthode statique a été appelée, tel que le Late State Binding le détermine.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>get_class([ object $object ])</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Retourne le nom de la classe de l\'objet. Le paramètre <code>$object</code> peut être omis lorsque la fonction est utilisée dans une classe.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>is_object($myArgument)</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Retourne true si l\'argument est un objet.\r\n                    </dd>\r\n                </dl>\r\n\r\n                <h3>Chaînes</h3>\r\n\r\n                <dl>\r\n                    <dt>\r\n                        <code>$myString[-1]</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Permet d\'accéder au dernier caractère de la chaîne.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>explode(\'séparateur\', \'Chaîne à exploser\')</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Retourne un tableau contenant les morceaux de la chaîne à explosés séparées par le séparateur.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>strtolower(\'Chaîne a mettre en minuscule\')</code> ou mieux : <code> mb_strtolower ( string $str [, string $encoding = mb_internal_encoding() ] ) : string</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Retourne la chaîne en minuscule. Préferer <code>mb_strtolower($string, \'UTF-8\')</code> qui fonctionne aussi pour les accents.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>string substr ( string $string , int $start [, int $length ] )</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Retourne le segment de <code>$string</code> commençant par <code>$start</code> et de <code>$length</code> caractères de long. Si on met une <code>$length</code> négative, alors ça enlève les caractères en partant de la fin de la chaîne.\r\n                    </dd>\r\n                </dl>\r\n\r\n                <h3>Tableaux</h3>\r\n\r\n                <dl>\r\n                    <dt>\r\n                        <code>end(array)</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Retourne le dernier élément du tableau en paramètre ou false si le tableau est vide.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>array compact($myVar1, $myVar2, ...)</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Crée un tableau à partir de variables et de leur valeur. So compact(\'var1\', \'var2\') is the same as saying array(\'var1\' => $var1, \'var2\' => $var2) as long as $var1 and $var2 are set.\r\n                    </dd>\r\n\r\n                    <dt>\r\n                        <code>int extract(array &$array [, int $flags = EXTR_OVERWRITE [, string $prefix = NULL ]])</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Fait l\'inverse de <code>compact</code>.\r\n                    </dd>\r\n                </dl>\r\n\r\n                <h3>Astuces</h3>\r\n\r\n                <dl>\r\n                    <dt>\r\n                        <code>uniqid([ string $prefix = \"\" [, bool $more_entropy = FALSE ])</code>\r\n                    </dt>\r\n                    <dd>\r\n                        Génère un identifiant unique, préfixé, basé sur la date et heure courante en microsecondes. <br>\r\n                        Si <code>$more_entropy</code> est <code>true</code> alors on augmente la probabilité de l\'unicité du résultat.\r\n                    </dd>\r\n                </dl>\r\n\r\n                <h2>Debugging</h2>\r\n\r\n                <table>\r\n                    <tr>\r\n                        <th>Instruction</th>\r\n                        <th>Description</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <code>void exit ([ string $status ] )</code>\r\n                        </td>\r\n                        <dd>\r\n                            Arrête le script. On peut passer une variable ou une chaîne à <code>exit()</code> pour l\'afficher avant d\'arrêter le bazar.\r\n                        </dd>\r\n\r\n                        <td>\r\n                            <code>void die ([ string $status ] )</code>\r\n                        </td>\r\n                        <td>\r\n                            Arrête le script. On peut passer une variable ou une chaîne à <code>die()</code> pour l\'afficher avant d\'arrêter le bazar.\r\n                        </td>\r\n\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <code>var_dump($variable1, $variable2, ...)</code>\r\n                        </td>\r\n                        <td>\r\n                            Affiche le contenu d\'une ou plusieurs variables.\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <code> print_r ( mixed $expression [, bool $return = FALSE ] ) : mixed)</code>\r\n                        </td>\r\n                        <td>\r\n                            Affiche le contenu d\'un tableau. En mettant <code>$return</code> à <code>true</code> la fonction retournera le résultat au lieu de l\'afficher.\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n\r\n                <h2>Liens utiles</h2>\r\n\r\n                <ul>\r\n                    <li>\r\n                        Bonnes pratiques : <a href=\"https://www.php-fig.org/psr/\">Liste des PSR (PHP Standard Recommendations)</a>\r\n                        <ul>\r\n                            <li>\r\n                                <a href=\"https://www.php-fig.org/psr/psr-1/\">PSR-1: Basic Coding Standard</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"https://www.php-fig.org/psr/psr-2/\">PSR-2: Coding Style Guide</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"https://www.php-fig.org/psr/psr-4/\">PSR-4: Autoloader</a>\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n                    <li>\r\n                        <dl>\r\n                            <dt>\r\n                                <a href=\"https://www.jetbrains.com/phpstorm/\">PhpStorm</a>\r\n                            </dt>\r\n                            <dd>\r\n                                Un IDE pour PHP.\r\n                            </dd>\r\n                        </dl>\r\n                    </li>\r\n                    <li>\r\n                        <dl>\r\n                            <dt>\r\n                                <a href=\"https://getcomposer.org/\">Composer</a>\r\n                            </dt>\r\n                            <dd>\r\n                                Permet d\'installer des librairies facilement.<br />\r\n                                <a href=\"https://www.grafikart.fr/tutoriels/composer-480\">Tuto de Grafikart</a>\r\n                            </dd>\r\n                        </dl>\r\n                    </li>\r\n                    <li>\r\n                        <dl>\r\n                            <dt>\r\n                                <a href=\"https://twig.symfony.com/\">Twig</a>\r\n                            </dt>\r\n                            <dd>\r\n                                Moteur de templates, utilisé entre autres par le framework Symfony.<br />\r\n                                <a href=\"https://www.grafikart.fr/tutoriels/twig-832\">Tuto de Grafikart</a>\r\n                            </dd>\r\n                        </dl>\r\n                    </li>\r\n                </ul>\r\n\r\n                <h2>Design pattern</h2>\r\n\r\n                <h3>Singleton</h3>\r\n\r\n                <div>\r\n                    <pre>\r\nnamespace Core;\r\n\r\nclass Config\r\n{\r\n\r\n    private $settings = [];\r\n    private static $_instance; // L\'attribut qui stockera l\'instance unique\r\n\r\n    /**\r\n    * La méthode statique qui permet d\'instancier ou de récupérer l\'instance unique\r\n    **/\r\n    public static function getInstance($file)\r\n    {\r\n        if (is_null(self::$_instance)) {\r\n            self::$_instance = new Config($file);\r\n        }\r\n        return self::$_instance;\r\n    }\r\n\r\n    /**\r\n    * Le constrcuteur avec sa logique est privé pour émpêcher l\'instanciation en dehors de la classe\r\n    **/\r\n    private function __construct($file)\r\n    {\r\n        $this->settings = require($file);\r\n    }\r\n\r\n    /**\r\n    *  Permet d\'obtenir la valeur de la configuration\r\n    *  @param $key string clef à récupérer\r\n    *  @return mixed\r\n    **/\r\n    public function get($key)\r\n    {\r\n        if (!isset($this->settings[$key])) {\r\n            return null;\r\n        }\r\n        return $this->settings[$key];\r\n    }\r\n\r\n}\r\n                    </pre>\r\n                </div>\r\n\r\n                <h3>Factory</h3>\r\n\r\n                <div>\r\n                    <p>Principe</p>\r\n                    <pre>\r\nclass Voiture\r\n{\r\n    private $marque;\r\n\r\n    public function __construct($marque)\r\n    {\r\n        $this->marque = $marque;\r\n    }\r\n\r\n    public function getName()\r\n    {\r\n        return \'Voiture \' . $this->marque;\r\n    }\r\n}\r\n\r\nclass VoitureFactory\r\n{\r\n    public static function create($marque)\r\n    {\r\n        return new Voiture($marque);\r\n    }\r\n}\r\n\r\n$twingo = VoitureFactory::create(\'Twingo\');\r\n$c3 = VoitureFactory::create(\'C3\');\r\n                    </pre>\r\n\r\n                    <p>Version ++</p>\r\n                    <pre>\r\nclass ArticleTable(){  }\r\n\r\nclass VoitureTable(){  }\r\n\r\nclass UtilisateurTable(){  }\r\n\r\nclass TableFactory(){\r\n\r\n    public static function create($table){\r\n        $class_name = ucfirst($table) . \'Table\';\r\n        return new $class_name();\r\n    }\r\n\r\n}\r\n\r\nTableFactory::create(\'Article\');\r\n                    </pre>\r\n                </div>\r\n\r\n                <h3>Fluent</h3>\r\n\r\n                <div>\r\n                    <pre>\r\nclass QueryBuilder{\r\n\r\n    private $fields = [];\r\n    private $conditions = [];\r\n    private $from = [];\r\n\r\n    public function select(){\r\n        $this->fields = func_get_args();\r\n        return $this;\r\n    }\r\n\r\n    public function where(){\r\n        foreach(func_get_args() as $arg){\r\n            $this->conditions[] = $arg;\r\n        }\r\n        return $this;\r\n    }\r\n\r\n    public function from($table, $alias = null){\r\n        if(is_null($alias)){\r\n            $this->from[] = $table;\r\n        }else{\r\n            $this->from[] = \"$table AS $alias\";\r\n        }\r\n        return $this;\r\n    }\r\n\r\n    public function __toString(){\r\n        return \'SELECT \'. implode(\', \', $this->fields)\r\n            . \' FROM \' . implode(\', \', $this->from)\r\n            . \' WHERE \' . implode(\' AND \', $this->conditions);\r\n    }\r\n\r\n}\r\n\r\n// Instructions\r\n$query = new QueryBuilder();\r\n$requete = $query->select(\'id\', \'titre\', \'contenu\')->from(\'articles\', \'Post\')->where(\'Post.category_id = 1\')->where(\'Post.date > NOW()\');\r\n                    </pre>\r\n                </div>\r\n\r\n                <h3>Façade</h3>\r\n\r\n                <div>\r\n                    <pre>\r\nclass QueryFacade{\r\n\r\n    public static function __callStatic($name, $arguments){\r\n        $query = new \\Core\\Database\\QueryBuilder();\r\n        return call_user_func_array([$query, $name], $arguments);\r\n    }\r\n\r\n}\r\n\r\n// On pourra ensuite l\'utiliser en faisant\r\nQueryFacade::select(\'id\', \'titre\')->from(\'articles\');\r\n\r\n// Ce qui équivaut à faire :\r\n$query = new \\Core\\Database\\QueryBuilder();\r\n$query->select(\'id\', \'titre\')->from(\'articles\');\r\n                    </pre>\r\n                </div>\r\n\r\n                <h3>Injection de dépendances</h3>\r\n\r\n                <div>\r\n                    <pre>\r\nclass Article{\r\n\r\n    private $database;\r\n\r\n// On remplace  ça :\r\n                        /*\r\n    public function __construct(){\r\n        $this->database = new MySQLDatabase(\'blog\');\r\n    }\r\n                        */\r\n// Par ça :\r\n    public function __construct($database){\r\n        $this->database = $database;\r\n    }\r\n}\r\n\r\n// Et quand on construit l\'objet\r\n$db = new MySQLDatabase(\'blog\');\r\n$article = new Article($db);\r\n\r\n// Maintenant on utilise un conteneur d\'injection de dépendances :\r\nclass DIContainer{\r\n\r\n    private static $db_instance;\r\n\r\n    /**\r\n    *  Permet de retourner un nouvel article\r\n    *  @return Article\r\n    **/\r\n    public function getArticle()\r\n    {\r\n        return new Article($this->getDatabase());\r\n    }\r\n\r\n    /**\r\n    * Permet de retourner une instance unique de la connexion à la base de donnée\r\n    * @return MySQLDatabase\r\n    **/\r\n    public function getDatabase()\r\n    {\r\n        if(self::$db_instance){\r\n            return new MySQLDatabase(\'blog\');\r\n        } else {\r\n            return self::$db_instance;\r\n        }\r\n    }\r\n}\r\n\r\n$container = new DIContainer(); // On pourra créer un singleton par la suite si besoin\r\n$article = $container->getArticle();\r\n                    </pre>\r\n                </div>\r\n\r\n                <h3>Les interfaces</h3>\r\n\r\n                <div>\r\n                    <p>\r\n                        Une interface oblige les classes qui l\'implémente à définir les méthodes de l\'interface.\r\n                    </p>\r\n\r\n                    <h4>Fichier MonInterface.php</h4>\r\n                    <pre>\r\ninterface MonInterface\r\n{\r\n	const UNE_CONSTANTE = \'zog\';\r\n\r\n	public function uneMethode($params);\r\n}\r\n                    </pre>\r\n\r\n                    <h4>Fichier MaClasse.php</h4>\r\n                    <pre>\r\nclass MaClasse implements MonInterface\r\n{\r\n	public function uneMethode($params)\r\n	{\r\n		echo self::UNE_CONSTANTE . $params;\r\n	}\r\n}\r\n                    </pre>\r\n                </div>\r\n\r\n                <h3>Les traits</h3>\r\n\r\n                <p>\r\n                    Le principe des traits est de permettre de contourner les limites imposées par l\'héritage simple de PHP. Le but est de permettre de créer de nouvelles méthodes et de nouvelles propriétés que l\'on pourra ajouter à nos différentes classes de manière horizontale.\r\n                </p>\r\n\r\n                <div>\r\n                    <h4>Exemple de trait</h4>\r\n                    <pre>\r\ntrait FileHandler\r\n{\r\n    public $files = [];\r\n\r\n    /**\r\n     * @param $fullPath\r\n     * @param string $mode\r\n     */\r\n    public function addAFile($fullPath, $mode = \'r\')\r\n    {\r\n        $fileName = self::getFileNameFromFullPath($fullPath);\r\n        $this->files[] = [$fileName => self::openFile($fullPath, $mode)];\r\n    }\r\n\r\n    /**\r\n     * @param $fullPath\r\n     * @return string\r\n     */\r\n    public static function getFileNameFromFullPath($fullPath)\r\n    {\r\n        $bitsOfPath = explode(\'/\', $fullPath);\r\n        return end($bitsOfPath);\r\n    }\r\n\r\n    /**\r\n     * @param $fileName string chemin du fichier\r\n     * @param string $mode = \'r\' pour read only\r\n     * @return bool|resource\r\n     */\r\n    public static function openFile($fileName, $mode = \'r\')\r\n    {\r\n        return fopen($fileName, $mode);\r\n    }\r\n\r\n    /**\r\n     * @param $fileName\r\n     * @return int\r\n     */\r\n    public static function countFileLines($fileName)\r\n    {\r\n        return substr_count(self::getFileContent($fileName), \"\\n\");\r\n    }\r\n\r\n    /**\r\n     * @param $fileName\r\n     * @return false|string\r\n     */\r\n    public static function getFileContent($fileName)\r\n    {\r\n        return file_get_contents($fileName);\r\n    }\r\n}\r\n                    </pre>\r\n\r\n                    <h4>Utilisation de traits</h4>\r\n                    <pre>\r\n// Dans une classe\r\nclass TestClass\r\n{\r\n    use RandomStuff, WrapTag;\r\n}\r\n\r\n// Dans un trait\r\ntrait MyTrait3\r\n{\r\n	use MyTrait2\r\n	{\r\n		sayHello as protected;\r\n		askHowAreYou as commentCaVa;\r\n		sayBye as protected direAuRevoir;\r\n	}\r\n}\r\n\r\n// Plusieurs traits\r\nclass MyClass2\r\n{\r\n	use MyTrait1, MyTrait2, MyTrait3 // Collision à cause des méthodes sayHello() dupliquées\r\n	{\r\n		MyTrait2::sayHello insteadof MyTrait1, MyTrait3; // On évite la collision en mettant la méthode conflictuelle d\'un trait en priorité sur les autres.\r\n		MyTrait2::askHowAreYou insteadof MyTrait1, MyTrait3;\r\n		MyTrait2::sayBye insteadof MyTrait1, MyTrait3;\r\n	}\r\n}\r\n\r\nclass MyClass3Daugther extends MyClass3\r\n{\r\n	use MyTrait1 {\r\n		sayBye as trait1SayBye;\r\n	}\r\n\r\n	public function sayBye() // Ici je n\'ai pas mis de paramètre contrairement à la fonction sayBye de MyTrait1, du coup ça affiche un warning\r\n	{\r\n		$this->trait1SayBye(\'zog\');\r\n		echo \'Ici sayBye() de MyClass3Daugther\';\r\n	}\r\n}\r\n                    </pre>\r\n                </div>\r\n\r\n                <h3>Conteneur d\'injection de dépendances (DIC)</h3>\r\n\r\n                <div>\r\n                    <p>\r\n                        DIC tout fait : <a href=\"https://pimple.symfony.com/\">pimple</a>\r\n                    </p>\r\n                    <p>\r\n                        Exemple de conteneur simple\r\n                    </p>\r\n                    <pre>\r\nclass DIC\r\n{\r\n    private $registeredSingleClosures = [];\r\n    private $registeredClosures = [];\r\n    private $instances = [];\r\n\r\n    /**\r\n     * @param $key\r\n     * @param callable $closure\r\n     */\r\n    public function set($key, Callable $closure)\r\n    {\r\n        $this->registeredClosures[$key] = $closure;\r\n    }\r\n\r\n    /**\r\n     * @param $key\r\n     * @param callable $closure\r\n     */\r\n    public function setOnce($key, Callable $closure)\r\n    {\r\n        $this->registeredSingleClosures[$key] = $closure;\r\n    }\r\n\r\n    /**\r\n     * @param $instance\r\n     */\r\n    public function setInstance($instance)\r\n    {\r\n        try {\r\n            $reflection = new ReflectionClass($instance);\r\n        } catch (ReflectionException $e) {\r\n            echo \'Ya un soucis dans DIC::setInstance() avec ReflectionClass.\';\r\n        }\r\n\r\n        $this->instances[$reflection->getName()] = $instance;\r\n    }\r\n\r\n    /**\r\n     * @param $key\r\n     * @return mixed\r\n     * @throws Exception\r\n     */\r\n    public function get($key)\r\n    {\r\n        // On regarde si la clé correspond à une closure qu\'on peut exécuter plusieurs fois\r\n        if (isset($this->registeredClosures[$key])) {\r\n            return $this->registeredClosures[$key]();\r\n        }\r\n\r\n        // On regarde si on a déjà une instance de créée avec la clé\r\n        if (!isset($this->instances[$key])) {\r\n            if (isset($this->registeredSingleClosures[$key])) {\r\n                $this->instances[$key] = $this->registeredSingleClosures[$key]();\r\n            } else {\r\n                throw new Exception($key . \" is not a registered closure\");\r\n            }\r\n        }\r\n    }\r\n}\r\n                    </pre>\r\n                    <p>\r\n                        Utilisation du DIC\r\n                    </p>\r\n                    <pre>\r\n// On enregistre les dépendances dans le conteneur\r\n$dic = new DIC();\r\n$dic->setOnce(\'Connection\', function () {\r\n    return new Connection(\'test_grafikart_dic\', \'root\', \'\');\r\n});\r\n\r\n$dic->set(\'Model\', function() use ($dic) {\r\n    return new Model($dic->get(\'Connection\'));\r\n});\r\n\r\n// On utilise le conteneur pour générer nos instances\r\n$connection = $dic->get(\'Connection\');\r\n$model = $dic->get(\'Model\');\r\n                    </pre>\r\n                </div>\r\n\r\n                <h3>Adapter</h3>\r\n\r\n                <div>\r\n                    <p>\r\n                        Permet de faire le lien entre des classes qui demandent des interfaces différentes.\r\n                    </p>\r\n                    <pre>\r\n// On a une classe qui demande un objet implémentant l\'interface CacheInterface\r\nclass Hello\r\n{\r\n\r\n    public function sayHello(CacheInterface $cache)\r\n    {\r\n        if($cache->has(\'hello\')) {\r\n            return $cache->get(\'hello\');\r\n        } else {\r\n            sleep(4); // On simule un script lent\r\n            $content = \'bonjour\';\r\n            $cache->set(\'hello\', $content);\r\n            return $content;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// Voici l\'interface CacheInterface\r\ninterface CacheInterface\r\n{\r\n    public function get($key);\r\n\r\n    public function has($key);\r\n\r\n    public function set($key, $value, $expiration = 3600);\r\n}\r\n\r\n// On veut utiliser le système de cache de Doctrine, du coup on utilise un adapter qui permettra de traduire les méthodes de Doctrine en méthodes de l\'interface CacheInterface\r\nclass DoctrineCacheAdapter implements CacheInterface\r\n{\r\n\r\n    private $cache; // Notre objet venant d\'une librairie tiers\r\n\r\n    // On injecte notre objet dans le constructeur\r\n    public function __construct(Doctrine\\Common\\Cache\\Cache $cache)\r\n    {\r\n        $this->cache = $cache;\r\n    }\r\n\r\n    // On map toutes les méthodes de l\'interface aux méthodes de l\'objet\r\n    public function get($key)\r\n    {\r\n        return $this->cache->fetch($key);\r\n    }\r\n\r\n    public function has($key)\r\n    {\r\n        return $this->cache->contains($key);\r\n    }\r\n\r\n    public function set($key, $value, $expiration = 3600)\r\n    {\r\n        return $this->cache->save($key, $value, $expiration);\r\n    }\r\n}\r\n\r\n// On peut maintenant utiliser Doctrine dans notre application via l\'adapter\r\n$cache = new \\Doctrine\\Common\\Cache\\FilesystemCache(__DIR__ . \'/cache\');\r\n// On \"adapte\" notre objet\r\n$adapter = new DoctrineCacheAdapter($cache);\r\n$hello = new Hello();\r\necho $hello->sayHello($adapter);\r\n                    </pre>\r\n                </div>\r\n\r\n                <h3>Decorator</h3>\r\n\r\n                <div>\r\n                    <p>\r\n                        Modifie le fonctionnement d\'un objet sans modifier sa classe.\r\n                    </p>\r\n                    <p>\r\n                        Utile car on ne peut pas faire de metaprogramming en php. On peut soit utiliser l\'héritage ou une interface. L\'interface est préférable car elle évite d\'avoir à modifier les constructeurs.\r\n                    </p>\r\n                    <pre>\r\n// L\'interface utile pour les décorateurs\r\ninterface HelloInterface\r\n{\r\n    public function sayHello();\r\n}\r\n\r\n// Notre classe de base\r\nclass Hello implements HelloInterface\r\n{\r\n    public function sayHello()\r\n    {\r\n        return \'Bonjour\';\r\n    }\r\n}\r\n\r\n// Décorateurs\r\nclass CaVaDecorator implements HelloInterface\r\n{\r\n    private $hello;\r\n\r\n    public function __construct(HelloInterface $hello)\r\n    {\r\n\r\n        $this->hello = $hello;\r\n    }\r\n\r\n    public function sayHello()\r\n    {\r\n        return $this->hello->sayHello() . \'. Comment ça va ?\';\r\n    }\r\n}\r\n\r\nclass MerciDecorator implements HelloInterface\r\n{\r\n    private $hello;\r\n\r\n    public function __construct(HelloInterface $hello)\r\n    {\r\n\r\n        $this->hello = $hello;\r\n    }\r\n\r\n    public function sayHello()\r\n    {\r\n        return $this->hello->sayHello() . \' Merci.\';\r\n    }\r\n}\r\n\r\n// On créé un objet puis on le modifie avec des décorators\r\n$hello = new Hello(); // \'Bonjour\'\r\n$hello = new CaVaDecorator($hello); // \'Bonjour. Comment ça va ?\'\r\n$hello = new MerciDecorator($hello); // \'Bonjour. Comment ça va ? Merci\'\r\n\r\necho $hello->sayHello();\r\n                    </pre>\r\n                </div>', '2019-02-15 16:42:28', '2019-02-16 07:37:47', 90),
(24, 90, 'Apprendre l\'électronique avec un microcontroleur attiny85', 'J\'ai décidé de me mettre à l\'électronique après avoir reçu un microcontrolleur attiny85 de DigiSpark en cadeau de mon abonnement à <a href=\"https://www.programmez.com/magazine.php\">[Programmez!]</a>. Cet article recense les infos que je glane à droite à gauche pour apprendre.', '<h2>Ressources pour débuter</h2>\r\n\r\n<p>\r\n    Je suis allé sur ce site pour trouver des tutos en électronique : <a href=\"http://www.supercondensateur.com/debuter-en-electronique\">supercondensateur.com/debuter-en-electronique</a>\r\n</p>\r\n\r\n<h2>Utiliser le microcontroleur attiny85 de DigiSpark</h2>\r\n\r\n<h3>C\'est quoi un microcontroleur ?</h3>\r\n\r\n<blockquote cite=\"https://fr.wikipedia.org/wiki/Microcontr%C3%B4leur\">\r\n    <p>\r\n        Un microcontrôleur (en notation abrégée µc, ou uc ou encore MCU en anglais) est un circuit intégré qui rassemble les éléments essentiels d\'un ordinateur : processeur, mémoires (mémoire morte et mémoire vive), unités périphériques et interfaces d\'entrées-sorties. Les microcontrôleurs se caractérisent par un plus haut degré d\'intégration, une plus faible consommation électrique, une vitesse de fonctionnement plus faible (de quelques mégahertz jusqu\'à plus d\'un gigahertz1) et un coût réduit par rapport aux microprocesseurs polyvalents utilisés dans les ordinateurs personnels.\r\n    </p>\r\n\r\n    <cite>\r\n        - <a href=\"https://fr.wikipedia.org/wiki/Microcontr%C3%B4leur\">Wikipédia</a>\r\n    </cite>\r\n</blockquote>\r\n\r\n<h3>Comment je le programme, ce machin ?</h3>\r\n\r\n<p>\r\n    Il se programme en utilisant le langage C. Voici un super cours pour apprendre ce merveilleux langage : <a\r\n        href=\"https://openclassrooms.com/fr/courses/19980-apprenez-a-programmer-en-c\">cours d\'OpenClassrooms</a>\r\n</p>\r\n\r\n<h3>Liens utiles</h3>\r\n\r\n<ul>\r\n    <li>\r\n        <a href=\"http://digistump.com/wiki/\">Wiki</a>\r\n    </li>\r\n    <li>\r\n        <a href=\"http://digistump.com/wiki/digispark/tutorials/connecting\">Instruction d\'installation en anglais</a>\r\n    </li>\r\n</ul>\r\n\r\n<h3>Intallation du bazar</h3>\r\n\r\n<p>\r\n<ol>\r\n    <li>\r\n        <a href=\"https://github-production-release-asset-2e65be.s3.amazonaws.com/28220127/e05aa054-9020-11e6-9de6-61504f7ad160?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181225%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181225T081436Z&X-Amz-Expires=300&X-Amz-Signature=c1c608f01721e12808b2ab917147ad9f69679a08cb37e88fea0d8733c7981c22&X-Amz-SignedHeaders=host&actor_id=43814948&response-content-disposition=attachment%3B%20filename%3DDigistump.Drivers.zip&response-content-type=application%2Foctet-stream\" target=\"_blank\">Installer les drivers</a> -> Exécuter DPinst64.exe\r\n    </li>\r\n    <li>\r\n        <a href=\"https://www.arduino.cc/en/Main/Software\">Installer Arduino IDE</a>\r\n    </li>\r\n</ol>\r\n</p>\r\n\r\n<h2>Mon premier programme</h2>\r\n\r\n<p>\r\n    Un programme permettant d\'allumer la LED de l\'attiny pour \"dire\" des phrases en code morse. Indispensable.\r\n</p>\r\n\r\n<p>\r\n    Voici le code : <a href=\"https://github.com/nicordev/attiny85-morse-code\">repo GitHub</a>\r\n</p>', '2019-02-15 22:21:30', '2019-02-15 22:41:56', 90),
(25, 90, 'Créer un thème enfant pour WordPress', 'En gros l\'idée c\'est de copier / coller un thème existant pour éviter que nos modifications apportées au thème ne soient perdu lors d\'une mise à jour.', '<h2>Thême enfant</h2>\r\n\r\n            <h3>Création</h3>\r\n\r\n            <ol>\r\n                <li>Aller dans le dossier <em>wp-content/themes</em> de Wordpress</li>\r\n                <li>Créer un nouveau dossier (exemple : <em>nomDuThemeParent-child</em>)</li>\r\n                <li>Copier les fichiers <em>functions.php</em> et <em>style.css</em> présents dans le dossier du thême parent et les placer dans le dossier du thême enfant</li>\r\n                <li>\r\n                    Faire les modifs suivantes dans les fichiers du dossier enfant :\r\n                    <ul>\r\n                        <li>\r\n                            Fichier style.css\r\n                            <ol>\r\n                                <li>\r\n                                    Copier le gros bloc de commentaires situé au début du fichier<br />\r\n                                    Exemple :\r\n                                    <pre>\r\n/*\r\nTheme Name: Nom du thème\r\nTheme URI: https://wordpress.org/themes/twentyfifteen/\r\nAuthor: the WordPress team\r\nAuthor URI: https://wordpress.org/\r\nDescription: Voilà, c\'est une description, on met ce qu\'on veut. C\'est cool.\r\nVersion: 2.0\r\nLicense: GNU General Public License v2 or later\r\nLicense URI: http://www.gnu.org/licenses/gpl-2.0.html\r\nTags: bootstrap\r\nText Domain: twentyfifteen\r\n\r\nThis theme, like WordPress, is licensed under the GPL.\r\nUse it to make something cool, have fun, and share what you\'ve learned with others.\r\n*/\r\n                                    </pre>\r\n                                </li>\r\n                                <li>Changez le <em>Theme Name:</em> avec le nom du dossier du thème enfant</li>\r\n                                <li>\r\n                                    Ajouter la ligne suivante sous <em>Theme Name:</em> :\r\n<pre>\r\nTemplate: nomDuDossierDuThèmeParent\r\n</pre>\r\n                                </li>\r\n                                <li>Effacer le contenu du fichier</li>\r\n                                <li>Coller le gros bloc de commentaires</li>\r\n                                <li>Enregistrer</li>\r\n                            </ol>\r\n                        </li>\r\n                        <li>\r\n                            Fichier functions.php\r\n                            <ol>\r\n                                <li>Effacer le contenu du fichier</li>\r\n                                <li>\r\n                                    Copier/coller le bloc de code suivant :\r\n<pre>\r\n&lt;?php\r\nadd_action( \'wp_enqueue_scripts\', \'theme_enqueue_styles\' );\r\n\r\nfunction theme_enqueue_styles() {\r\n    wp_enqueue_style( \'parent-style\', get_template_directory_uri() . \'/style.css\' );\r\n    wp_enqueue_style( \'child-style\', get_stylesheet_uri(), array( \'parent-style\' ) );\r\n}</pre>\r\n                                </li>\r\n                                <li>Enregistrer</li>\r\n                            </ol>\r\n                        </li>\r\n                    </ul>\r\n                </li>\r\n            </ol>\r\n\r\n            <h3>Utilisation</h3>\r\n\r\n            <ol>\r\n                <li>Dans le tableau de bord Wordpress : <em>Apparence/Thèmes</em></li>\r\n                <li>Activer le thême enfant</li>\r\n            </ol>', '2019-02-15 23:31:15', '2019-02-16 07:37:58', 90);
INSERT INTO `bl_post` (`p_id`, `p_author_id_fk`, `p_title`, `p_excerpt`, `p_content`, `p_creation_date`, `p_last_modification_date`, `p_last_editor_id_fk`) VALUES
(26, 90, 'Créer un thème WordPress à partir de rien.', 'Là on monte en gamme, l\'idée est de créer son propre thème.', '<h2>Création d\'un thème WordPress</h2>\r\n\r\n            <p>\r\n                Tuto repris du site de <a href=\"https://www.taniarascia.com/developing-a-wordpress-theme-from-scratch/\" target=\"_blank\">Tania Rascia</a>. J\'ai juste synthétisé les modifs que l\'auteure fait au fur et à mesure de son tuto qui est du coup plus détaillé et progressif.\r\n            </p>\r\n\r\n            <!-- Version statique -->\r\n            <article>\r\n                <h3>Version HTML statique (pour comprendre la base)</h3>\r\n\r\n                <p>\r\n                    <ol>\r\n                        <li>Créer un dossier portant le nom du thème à créer dans le dossier <em>wp-content/themes</em> de Wordpress</li>\r\n                        <li>Créer 2 fichiers\r\n                            <ul>\r\n                                <li><em>index.php</em></li>\r\n                                <li><em>style.css</em>\r\n                                </li>\r\n                            </ul>\r\n                        </li>\r\n                    </ol>\r\n                    <p>\r\n                        Le fichier index.php est constitué de votre page HTML statique.\r\n                    </p>\r\n                    <p>Contenu du fichier <em>style.css</em> (à personnaliser) :\r\n<pre>\r\n/*\r\nTheme Name: Nom du thème\r\nAuthor: Votre nom\r\nDescription: Alors c\'est un super thème, joli et tout et tout...\r\nVersion: 0.0.1\r\nTags: bootstrap\r\n*/\r\n</pre>\r\n                    </p>\r\n                    <p class=\"note\">\r\n                        Ces 2 fichiers suffisent pour voir apparaître votre thème dans l\'interface de WordPress. Vous avez réussi ! Bravo !\r\n                    </p>\r\n                    <p>\r\n                        Vous pouvez aussi ajouter un autre fichier css dans le dossier de votre thème pour la mise en forme de votre site. Pensez alors à mettre un lien dans le <code>&lt;head&gt;</code> du fichier <em>index.php</em> (exemple <code>&lt;link href=\"blog.css\" rel=\"stylesheet\"&gt;</code>).\r\n                    </p>\r\n                    <p>\r\n                        Voici maintenant <a href=\"https://github.com/taniarascia/bootstrapblog\">un lien vers un repository GitHub de Tania Rascia</a> où vous trouverez 2 fichiers pour vous entraîner et qui serviront de base à la suite de ce tuto. N\'oubliez pas de renommer le fichier <em>index.html</em> en <em>index.php</em> ni de créer le fichier <em>style.css</em> !\r\n                    </p>\r\n                    <p class=\"note\">Conclusion : c\'est pas compliqué mais pour l\'instant le résultat n\'est pas ouf non plus... Passons maintenant aux choses sérieuses !</p>\r\n                </p>\r\n            </article>\r\n\r\n            <!-- Version dynamique -->\r\n            <article>\r\n                <h3>Version dynamique !</h3>\r\n\r\n                <p>\r\n                    On va diviser le contenu du fichier <em>index.php</em> dans 4 fichiers : <em>header.php</em>, <em>footer.php</em>, <em>sidebar.php</em> et <em>content.php</em>\r\n                </p>\r\n                <p>\r\n                    Le fichier <em>index.php</em> servira alors de lien entre ces fichiers.\r\n                </p>\r\n                <p>C\'est parti !</p>\r\n\r\n                <!-- header.php -->\r\n                <h4>header.php</h4>\r\n<pre>\r\n&lt;!DOCTYPE html>\r\n&lt;html lang=\"en\">\r\n\r\n&lt;head>\r\n    &lt;meta charset=\"utf-8\">\r\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n    &lt;meta name=\"description\" content=\"\">\r\n    &lt;meta name=\"author\" content=\"\">\r\n\r\n    &lt;title><span class=\"php_code\">&lt;?php echo get_bloginfo( \'name\' ); ?></span>&lt;/title>\r\n    &lt;link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n    &lt;!-- Custom CSS -->\r\n    &lt;link href=\"<span class=\"php_code\">&lt;?php echo get_bloginfo( \'template_directory\' );?></span>/blog.css\" rel=\"stylesheet\">\r\n    &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->\r\n    &lt;!--[if lt IE 9]>\r\n        &lt;script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\">&lt;/script>\r\n        &lt;script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\">&lt;/script>\r\n    &lt;![endif]-->\r\n&lt;?php wp_head();?>\r\n&lt;/head>\r\n\r\n&lt;body>\r\n\r\n    &lt;div class=\"blog-masthead\">\r\n        &lt;div class=\"container\">\r\n            &lt;nav class=\"blog-nav\">\r\n                &lt;a class=\"blog-nav-item active\" href=\"#\">Home&lt;/a>\r\n                <span class=\"php_code\">&lt;?php wp_list_pages( \'&title_li=\' ); ?></span>\r\n            &lt;/nav>\r\n        &lt;/div>\r\n    &lt;/div>\r\n\r\n    &lt;div class=\"container\">\r\n\r\n    &lt;div class=\"blog-header\">\r\n        &lt;h1 class=\"blog-title\">&lt;a href=\"&lt;?php echo get_bloginfo( \'wpurl\' );?>\">&lt;?php echo get_bloginfo( \'name\' ); ?>&lt;/a>&lt;/h1>\r\n        &lt;p class=\"lead blog-description\">&lt;?php echo get_bloginfo( \'description\' ); ?>&lt;/p>\r\n    &lt;/div>\r\n</pre>\r\n                <p>\r\n                    La fonction php <code><span class=\"php_code\">&lt;?php echo get_bloginfo( \'name\' ); ?></span></code> va permettre d\'insérer le titre du site que vous avez choisi dans l\'interface d\'administration de WordPress.\r\n                </p>\r\n                <p>\r\n                    La fonction php <code><span class=\"php_code\">&lt;?php echo get_bloginfo( \'template_directory\' );?></span></code> va elle insérer automatiquement le chemin d\'accès au dossier de votre thème.\r\n                </p>\r\n                <p>\r\n                    La fonction php <code><span class=\"php_code\">&lt;?php wp_list_pages( \'&title_li=\' ); ?></span></code> va insérer les liens vers les différentes pages du site.\r\n                </p>\r\n                <p class=\"note\">Les liens vont mal s\'afficher en utilisant le fichier <em>blog.css</em> du repo de Tanya. Il faut alors ajouter le code suivant dans le fichier <em>blog.css</em> :</p>\r\n<pre>\r\n.blog-nav li {\r\n    position: relative;\r\n    display: inline-block;\r\n    padding: 10px;\r\n    font-weight: 500;   \r\n}\r\n.blog-nav li a {\r\n    color: #fff;\r\n}\r\n</pre>\r\n\r\n                <!-- footer.php -->\r\n                <h4>footer.php</h4>\r\n<pre>\r\n        &lt;/div> &lt;!-- /.container -->\r\n\r\n        &lt;footer class=\"blog-footer\">\r\n            &lt;p>Blog template built for &lt;a href=\"http://getbootstrap.com\">Bootstrap&lt;/a> by &lt;a href=\"https://twitter.com/mdo\">@mdo&lt;/a>.&lt;/p>\r\n            \r\n            &lt;p>&lt;a href=\"#\">Back to top&lt;/a>&lt;/p>\r\n        &lt;/footer>\r\n\r\n        &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\">&lt;/script>\r\n        &lt;script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\">&lt;/script>\r\n        &lt;?php wp_footer(); ?> \r\n    &lt;/body>\r\n&lt;/html>\r\n</pre>\r\n    \r\n                <!-- sidebar.php -->\r\n                <h4>sidebar.php</h4>\r\n<pre>\r\n&lt;div class=\"col-sm-3 col-sm-offset-1 blog-sidebar\">\r\n\r\n    &lt;div class=\"sidebar-module sidebar-module-inset\">\r\n\r\n        &lt;h4>About&lt;/h4>\r\n\r\n        &lt;p><span class=\"php_code\">&lt;?php the_author_meta( \'description\' ); ?></span> &lt;/p>\r\n    &lt;/div>\r\n\r\n    &lt;div class=\"sidebar-module\">\r\n\r\n        &lt;h4>Archives&lt;/h4>\r\n\r\n        &lt;ol class=\"list-unstyled\">\r\n            <span class=\"php_code\">&lt;?php wp_get_archives( \'type=monthly\' ); ?></span>\r\n        &lt;/ol>\r\n    &lt;/div>\r\n\r\n    &lt;div class=\"sidebar-module\">\r\n\r\n        &lt;h4>Elsewhere&lt;/h4>\r\n        \r\n        &lt;ol class=\"list-unstyled\">\r\n            &lt;li>&lt;a href=\"#\">GitHub&lt;/a>&lt;/li>\r\n            &lt;li>&lt;a href=\"#\">Twitter&lt;/a>&lt;/li>\r\n            &lt;li>&lt;a href=\"#\">Facebook&lt;/a>&lt;/li>\r\n        &lt;/ol>\r\n    &lt;/div>\r\n&lt;/div>&lt;!-- /.blog-sidebar -->\r\n</pre>\r\n                <p>\r\n                    La fonction <code><span class=\"php_code\">&lt;?php the_author_meta( \'description\' ); ?></span></code> va afficher la description de l\'auteur.\r\n                </p>\r\n                <p>\r\n                    La fonction <code><span class=\"php_code\">&lt;?php wp_get_archives( \'type=monthly\' ); ?></span></code> va regrouper les archives triées par mois.\r\n                </p>\r\n                \r\n                <!-- content.php -->\r\n                <h4>content.php</h4>\r\n<pre>\r\n&lt;div class=\"blog-post\">\r\n    &lt;!-- Titre du billet de blog -->\r\n    &lt;h2 class=\"blog-post-title\"><span class=\"php_code\">&lt;?php the_title(); ?></span>&lt;/h2>\r\n\r\n    &lt;!-- Auteur et date du billet de blog -->\r\n    &lt;p class=\"blog-post-meta\"><span class=\"php_code\">&lt;?php the_date(); ?></span> by &lt;a href=\"#\"><span class=\"php_code\">&lt;?php the_author(); ?></span>&lt;/a>&lt;/p>\r\n\r\n    &lt;!-- Contenu du billet de blog -->\r\n    <span class=\"php_code\">&lt;?php the_content(); ?></span>\r\n&lt;/div>&lt;!-- /.blog-post -->\r\n</pre>\r\n                <p>\r\n                    La fonction <code><span class=\"php_code\">&lt;?php the_title(); ?></span></code> permet d\'afficher le titre du billet de blog.\r\n                </p>\r\n                <p>\r\n                    La fonction <code><span class=\"php_code\">&lt;?php the_date(); ?></span></code> affiche la date de création du billet de blog.\r\n                </p>\r\n                <p>\r\n                    La fonction <code><span class=\"php_code\">&lt;?php the_author(); ?></code> affiche l\'auteur du billet.\r\n                </p>\r\n                <p>\r\n                    La fonction <code><span class=\"php_code\">&lt;?php the_content(); ?></span></code> affiche le contenu du billet.\r\n                </p>\r\n\r\n                <!-- index.php -->\r\n                <h4>index.php</h4>\r\n\r\n<pre>\r\n<span class=\"php_code\">&lt;?php get_header(); ?></span>\r\n\r\n    &lt;div class=\"row\">\r\n\r\n        &lt;div class=\"col-sm-8 blog-main\">\r\n            <span class=\"php_code\">&lt;?php\r\n            if ( have_posts() ) : while ( have_posts() ) : the_post(); \r\n                get_template_part( \'content\', get_post_format() );\r\n            endwhile; endif; \r\n            ?></span>\r\n        &lt;/div> &lt;!-- /.blog-main -->\r\n\r\n        <span class=\"php_code\">&lt;?php get_sidebar(); ?></span>\r\n\r\n    &lt;/div> &lt;!-- /.row -->\r\n\r\n<span class=\"php_code\">&lt;?php get_footer(); ?></span>\r\n</pre>\r\n                <p>\r\n                    Les instructions suivantes servent à générer les articles de blogs disponibles :\r\n<pre>\r\n    <span class=\"php_code\">&lt;?php\r\n    if ( have_posts() ) : while ( have_posts() ) : the_post(); \r\n        get_template_part( \'content\', get_post_format() );\r\n    endwhile; endif; \r\n    ?></span>\r\n</pre>\r\n                </p>\r\n                <p>\r\n                    Les instructions <code><span class=\"php_code\">&lt;?php get_header(); ?></span></code>, <code><span class=\"php_code\">&lt;?php get_sidebar(); ?></span></code> et <code><span class=\"php_code\">&lt;?php get_footer(); ?></span></code> servent à insérer le code contenu dans les fichiers <em>header.php</em>, <em>sidebar.php</em> et <em>footer.php</em>.\r\n                </p>\r\n                <p class=\"note\">\r\n                    Essayez maintenant d\'ajouter des articles de blog, de changer le nom et le slogan du site via l\'interface WordPress et admirez le résultat !\r\n                </p>\r\n            </article>\r\n\r\n            <!-- Création d\'un affichage différent pour les pages du site -->\r\n            <article>\r\n                <h3>On se pose en douceur... Création d\'un affichage différent pour les pages du site</h3>\r\n\r\n                <p>\r\n                    Il faut créer un fichier <em>page.php</em> qui va ressembler fortement à <em>index.php</em>.\r\n                </p>\r\n                <p>\r\n                    Dans l\'exemple suivant, on a choisit de ne pas afficher la barre latérale (en omettant le fichier <em>sidebar.php</em>) et d\'afficher le contenu des pages sur toutes la largeur (avec la classe Bootstrap <em>col-sm-12</em>).\r\n                </p>\r\n<pre>\r\n<span class=\"php_code\">&lt;?php get_header(); ?></span>\r\n\r\n    &lt;div class=\"row\">\r\n        &lt;div class=\"col-sm-12\">\r\n\r\n            <span class=\"php_code\">&lt;?php \r\n                if ( have_posts() ) : while ( have_posts() ) : the_post();\r\n    \r\n                    get_template_part( \'content\', get_post_format() );\r\n  \r\n                endwhile; endif; \r\n            ?></span>\r\n\r\n        &lt;/div> &lt;!-- /.col -->\r\n    &lt;/div> &lt;!-- /.row -->\r\n\r\n<span class=\"php_code\">&lt;?php get_footer(); ?></span>\r\n</pre>\r\n                <p class=\"note\">\r\n                    Un grand merci à Tania Rascia pour avoir fait le tuto sur lequel j\'ai honteusement pompé. <a href=\"https://ko-fi.com/taniarascia\">Vous pouvez d\'ailleurs lui payer un café pour la remercier.</a>\r\n                </p>\r\n            </article>', '2019-02-15 23:33:34', '2019-02-15 23:33:34', 90);

INSERT INTO `bl_post_tag` (`pt_post_id_fk`, `pt_tag_id_fk`) VALUES
(12, 71),
(13, 71),
(16, 73),
(17, 73),
(18, 73),
(23, 73),
(24, 73),
(25, 73),
(26, 73),
(23, 90),
(16, 91),
(16, 92),
(17, 92),
(18, 92),
(23, 92),
(25, 92),
(26, 92),
(17, 93),
(17, 94),
(18, 95),
(25, 96),
(26, 96),
(24, 97),
(24, 98),
(25, 98),
(26, 98),
(24, 99),
(24, 100);

INSERT INTO `bl_role` (`r_id`, `r_name`) VALUES
(1, 'member'),
(2, 'author'),
(3, 'editor'),
(4, 'moderator'),
(5, 'admin');

INSERT INTO `bl_role_member` (`rm_member_id_fk`, `rm_role_id_fk`) VALUES
(87, 1),
(88, 1),
(90, 1),
(91, 1),
(92, 1),
(93, 1),
(94, 1),
(95, 1),
(87, 2),
(88, 2),
(90, 2),
(94, 2),
(87, 3),
(90, 3),
(91, 3),
(94, 3),
(87, 4),
(90, 4),
(92, 4),
(94, 4),
(87, 5),
(90, 5);

INSERT INTO `bl_tag` (`tag_id`, `tag_name`) VALUES
(71, 'A propos'),
(73, 'Blog'),
(74, 'Portfolio'),
(90, 'PHP'),
(91, 'CSS'),
(92, 'Développement'),
(93, 'Git'),
(94, 'GitHub'),
(95, 'HTML'),
(96, 'WordPress'),
(97, 'Electronique'),
(98, 'Apprendre'),
(99, 'Attiny85'),
(100, 'C');